---
# checkov:skip=CKV2_GHA_1: "Ensure top-level permissions are not set to write-all"
# https://docs.github.com/en/actions/quickstart
# hhttps://github.com/marketplace/actions/build-and-publish-docker-image-to-github-container-registry
name: "Terraform Modules Library Pipeline"

on: # yamllint disable-line rule:truthy
  push: # yamllint disable-line rule:empty-values

env:
  TF_CLOUD_ORGANIZATION: "nolan"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "terraform-modules-library"
  CONFIG_DIRECTORY: "./"

jobs:
  build-and-publish-latest:
    if: ${{ vars.REBUILD_CONTAINER_IMAGE == 'true' }}
    runs-on: ubuntu-latest

    steps:
      # Checking out the repo
      - uses: actions/checkout@v3

      # https://github.com/docker/setup-qemu-action
      # https://blog.thesparktree.com/docker-multi-arch-github-actions
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: 'arm64,amd64'

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # https://github.com/docker/metadata-action#tags-input
          # tags: ${{ steps.meta.outputs.tags }}
          tags: ghcr.io/${{ github.repository_owner }}/terraform-modules-library-container:latest # INFO: Hardcoding latest tag
          labels: ${{ steps.meta.outputs.labels }}

  run-run-dot-sh:
    runs-on: ubuntu-latest
    needs: build-and-publish-latest
    if: |
      always() &&
      (needs.build-and-publish-latest.result == 'success' || needs.build-and-publish-latest.result == 'skipped')
    container:
      image: ghcr.io/${{ github.repository_owner }}/terraform-modules-library-container:latest # INFO: Pinned to latest tag
      options: --user 1001

    steps:
      # Checking out the repo
      - uses: actions/checkout@v3

      - name: Terraform version
        run: terraform -v

      - name: Copy /home/ubuntu/.tflint.d to /github/home/
        run: cp -r /home/ubuntu/.tflint.d /github/home/

      - name: Install Pre Commit
        run: python3 -m pip install --no-cache-dir --quiet --upgrade --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org git+https://github.com/pre-commit/pre-commit.git@v2.20.0

      - name: cd GITHUB_WORKSPACE
        run: cd $GITHUB_WORKSPACE

      - name: Run
        run: ./run.sh

  push-modules-and-patterns-upstream:
    runs-on: ubuntu-latest
    needs: run-run-dot-sh
    if: |
      always() &&
      (needs.run-run-dot-sh.result == 'success' || needs.run-run-dot-sh.result == 'skipped')
    container:
      image: ghcr.io/${{ github.repository_owner }}/terraform-modules-library-container:latest # INFO: Pinned to latest tag
      options: --user 1001

    steps:
      # Checking out the repo
      - uses: actions/checkout@v3

      - name: cd GITHUB_WORKSPACE
        run: cd $GITHUB_WORKSPACE

      # - name: Debug
      #   run: git config --list; pwd; ls -la; ls -la aws/modules/debug/; tree -L 4

      # - name: Env
      #   run: env

      - name: Push Modules and Patterns Upstream
        run: make push-modules-and-patterns-upstream
        env:
          ACCESS_TOKEN_GITHUB: ${{ secrets.ACCESS_TOKEN_GITHUB }}

  terraform-cli-plan:
    needs: push-modules-and-patterns-upstream
    if: |
      always() &&
      (needs.run-run-dot-sh.result == 'success' || needs.run-run-dot-sh.result == 'skipped') &&
      (needs.push-modules-and-patterns-upstream.result == 'success' || needs.push-modules-and-patterns-upstream.result == 'skipped')
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository_owner }}/terraform-modules-library-container:latest
      options: --user 1001

    steps:
      - uses: actions/checkout@v3

      - name: Terraform version
        run: terraform -v

      - name: Terraform init
        run: terraform init -upgrade
        working-directory: ./terraform/aws/patterns/terraform-test-all-patterns

      - name: Terraform plan
        run: terraform plan
        working-directory: ./terraform/aws/patterns/terraform-test-all-patterns
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}

  terraform-plan-on-tfc:
    needs: push-modules-and-patterns-upstream
    if: |
      always() &&
      (needs.run-run-dot-sh.result == 'success' || needs.run-run-dot-sh.result == 'skipped') &&
      (needs.push-modules-and-patterns-upstream.result == 'success' || needs.push-modules-and-patterns-upstream.result == 'skipped')
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository_owner }}/terraform-modules-library-container:latest
      options: --user 1001

    steps:
      - uses: actions/checkout@v3

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.4
        id: config-upload
        with:
          workspace: "terraform-modules-library"
          directory: "./terraform/aws/patterns/terraform-test-all-patterns"
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.4
        id: plan-run
        with:
          workspace: "terraform-modules-library"
          configuration_version: ${{ steps.config-upload.outputs.configuration_version_id }}
          plan_only: true

  terraform-cli-apply:
    needs: terraform-cli-plan
    if: |
      always() &&
      (needs.run-run-dot-sh.result == 'success' || needs.run-run-dot-sh.result == 'skipped') &&
      (needs.terraform-cli-plan.result == 'success' || needs.terraform-cli-plan.result == 'skipped')
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository_owner }}/terraform-modules-library-container:latest
      options: --user 1001

    steps:
      - uses: actions/checkout@v3

      - name: Terraform version
        run: terraform -v

      - name: Terraform init
        run: terraform init -upgrade
        working-directory: ./terraform/aws/patterns/terraform-test-all-patterns

      - name: Terraform plan
        run: terraform plan
        working-directory: ./terraform/aws/patterns/terraform-test-all-patterns
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}

      - name: Terraform apply
        run: terraform apply -auto-approve
        working-directory: ./terraform/aws/patterns/terraform-test-all-patterns
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}

  terraform-plan-apply-on-tfc:
    needs: terraform-plan-on-tfc
    if: |
      always() &&
      (needs.run-run-dot-sh.result == 'success' || needs.run-run-dot-sh.result == 'skipped') &&
      (needs.terraform-plan-on-tfc.result == 'success' || needs.terraform-plan-on-tfc.result == 'skipped')
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository_owner }}/terraform-modules-library-container:latest
      options: --user 1001

    steps:
      - uses: actions/checkout@v3

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.4
        id: config-upload
        with:
          workspace: "terraform-modules-library"
          directory: "./terraform/aws/patterns/terraform-test-all-patterns"
          speculative: false

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.4
        id: plan-run
        with:
          workspace: "terraform-modules-library"
          configuration_version: ${{ steps.config-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.4
        id: apply-run
        with:
          workspace: "terraform-modules-library"
          configuration_version: ${{ steps.config-upload.outputs.configuration_version_id }}

      - name: Confirm Apply Run
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.4
        id: confirm-apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Confirmed from GitHub Actions CI"
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true
